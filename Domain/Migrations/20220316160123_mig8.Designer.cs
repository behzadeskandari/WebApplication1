// <auto-generated />
using System;
using Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace Domain.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220316160123_mig8")]
    partial class mig8
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Db.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address")
                        .HasMaxLength(300);

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Country")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Family")
                        .HasMaxLength(100);

                    b.Property<int?>("ImageID");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(15);

                    b.Property<string>("Province")
                        .HasMaxLength(100);

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("ImageID");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Domain.Db.TblAccess", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("TblAccess");
                });

            modelBuilder.Entity("Domain.Db.TblAsks", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AskID");

                    b.Property<DateTime>("Date");

                    b.Property<int>("DisLike");

                    b.Property<string>("Ip")
                        .HasMaxLength(50);

                    b.Property<int>("Like");

                    b.Property<bool>("Noti");

                    b.Property<int>("ProductID");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("AskID")
                        .HasName("IX_AskID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("TblAsks");
                });

            modelBuilder.Entity("Domain.Db.TblBoon", b =>
                {
                    b.Property<int>("ID");

                    b.Property<int>("OrderID");

                    b.Property<string>("BoonGroupID");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("Status");

                    b.Property<string>("UserID");

                    b.HasKey("ID", "OrderID");

                    b.HasIndex("BoonGroupID")
                        .HasName("IX_BoonGroupID");

                    b.HasIndex("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("TblBoon");
                });

            modelBuilder.Entity("Domain.Db.TblBrands", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ImageID");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("ImageID");

                    b.ToTable("TblBrands");
                });

            modelBuilder.Entity("Domain.Db.TblCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ParrentID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("ParrentID")
                        .HasName("IX_ParrentID");

                    b.HasIndex("Title")
                        .HasName("IX_Title");

                    b.ToTable("TblCategory");
                });

            modelBuilder.Entity("Domain.Db.TblComments", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bad")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Best")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<bool>("Confirm");

                    b.Property<DateTime>("Date");

                    b.Property<int>("DisLike");

                    b.Property<string>("Ip");

                    b.Property<int>("Item1");

                    b.Property<int>("Item2");

                    b.Property<int>("Item3");

                    b.Property<int>("Item4");

                    b.Property<int>("Item5");

                    b.Property<int>("Item6");

                    b.Property<int>("Like");

                    b.Property<int>("ProductID");

                    b.Property<bool>("Read");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("Confirm")
                        .HasName("IX_Confirm");

                    b.HasIndex("ProductID");

                    b.HasIndex("Read")
                        .HasName("IX_Read");

                    b.HasIndex("UserID");

                    b.ToTable("TblComments");
                });

            modelBuilder.Entity("Domain.Db.TblException", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action");

                    b.Property<string>("Controller");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Ex");

                    b.Property<string>("Message");

                    b.Property<string>("Title");

                    b.Property<string>("UserID");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("TblExceptions");
                });

            modelBuilder.Entity("Domain.Db.TblFavo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductID");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("TblFavos");
                });

            modelBuilder.Entity("Domain.Db.TblGurunty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Darsad");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("TblGurunty");
                });

            modelBuilder.Entity("Domain.Db.TblImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alt")
                        .HasMaxLength(100);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("ProductID");

                    b.Property<int>("ServerID");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ServerID");

                    b.ToTable("TblImage");
                });

            modelBuilder.Entity("Domain.Db.TblLoginHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CookieID");

                    b.Property<string>("Url")
                        .HasMaxLength(500);

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CookieID")
                        .HasName("IX_CookieID");

                    b.HasIndex("UserID");

                    b.ToTable("TblLoginHistory");
                });

            modelBuilder.Entity("Domain.Db.TblMenus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ParrentID");

                    b.Property<int>("Sort");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.HasIndex("Title")
                        .HasName("IX_Title");

                    b.ToTable("TblMenus");
                });

            modelBuilder.Entity("Domain.Db.TblMessages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminID");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Ip")
                        .HasMaxLength(50);

                    b.Property<bool>("Read");

                    b.Property<string>("Text");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("AdminID");

                    b.HasIndex("Read")
                        .HasName("IX_Read");

                    b.HasIndex("UserID");

                    b.ToTable("TblMessages");
                });

            modelBuilder.Entity("Domain.Db.TblNewsLetter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("TblNewsLetter");
                });

            modelBuilder.Entity("Domain.Db.TblNoti", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("ProductID");

                    b.Property<bool>("Status");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("Date")
                        .HasName("IX_Date");

                    b.HasIndex("ProductID");

                    b.HasIndex("Status")
                        .HasName("IX_Status");

                    b.HasIndex("UserID");

                    b.ToTable("TblNoti");
                });

            modelBuilder.Entity("Domain.Db.TblOrders", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankGetNumber")
                        .HasMaxLength(50);

                    b.Property<string>("BankTransNumber")
                        .HasMaxLength(50);

                    b.Property<string>("BoonGroupID");

                    b.Property<string>("PostBarCode")
                        .HasMaxLength(50);

                    b.Property<int>("PostID");

                    b.Property<string>("Price");

                    b.Property<string>("PriceBoon");

                    b.Property<string>("ShopingCartGroupID");

                    b.Property<int>("Status");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("BankGetNumber")
                        .HasName("IX_BankGetNumber");

                    b.HasIndex("BankTransNumber")
                        .HasName("IX_BankTransNumber");

                    b.HasIndex("BoonGroupID")
                        .HasName("IX_BoonGroupID");

                    b.HasIndex("PostBarCode")
                        .HasName("IX_PostBarCode");

                    b.HasIndex("PostID");

                    b.HasIndex("ShopingCartGroupID")
                        .HasName("IX_ShopingCartGroupID");

                    b.HasIndex("Status")
                        .HasName("IX_Status");

                    b.HasIndex("UserID");

                    b.ToTable("TblOrders");
                });

            modelBuilder.Entity("Domain.Db.TblPrices", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasMaxLength(14);

                    b.Property<int>("ProductID");

                    b.HasKey("ID");

                    b.HasIndex("Date")
                        .HasName("IX_Date");

                    b.HasIndex("ProductID");

                    b.ToTable("TblPrices");
                });

            modelBuilder.Entity("Domain.Db.TblProducts", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CateID");

                    b.Property<int>("Count");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Evaluation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GuruntyID");

                    b.Property<string>("Size");

                    b.Property<int>("Status");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleEn")
                        .HasMaxLength(255);

                    b.Property<string>("TitleFa")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("UserID");

                    b.Property<int>("Visit");

                    b.Property<int>("Wight");

                    b.Property<int?>("spID");

                    b.HasKey("ID");

                    b.HasIndex("CateID");

                    b.HasIndex("Date")
                        .HasName("IX_Date");

                    b.HasIndex("GuruntyID");

                    b.HasIndex("Status")
                        .HasName("IX_Status");

                    b.HasIndex("TitleEn")
                        .HasName("IX_TitleEn");

                    b.HasIndex("TitleFa")
                        .HasName("IX_TitleFa");

                    b.HasIndex("UserID");

                    b.HasIndex("spID");

                    b.ToTable("TblProducts");
                });

            modelBuilder.Entity("Domain.Db.TblPropertis", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("TblPropertis");
                });

            modelBuilder.Entity("Domain.Db.TblPropertis_Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Price");

                    b.Property<int>("ProductID");

                    b.Property<int>("PropertiseID");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("PropertiseID");

                    b.ToTable("TblPropertis_Product");
                });

            modelBuilder.Entity("Domain.Db.TblRaiting", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductID");

                    b.Property<int>("Star");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("TblRaiting");
                });

            modelBuilder.Entity("Domain.Db.TblServers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HttpDomain")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Path")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.ToTable("TblServers");
                });

            modelBuilder.Entity("Domain.Db.TblSettings", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BoonValue");

                    b.Property<string>("Brand")
                        .HasMaxLength(100);

                    b.Property<int>("CountAskPerPage");

                    b.Property<int>("CountCommentPerPage");

                    b.Property<string>("FavoIcon")
                        .HasMaxLength(100);

                    b.Property<bool>("OnlyShowConfirmedComment");

                    b.Property<string>("SiteDescreption")
                        .HasMaxLength(200);

                    b.Property<string>("SiteKeyWords")
                        .HasMaxLength(100);

                    b.Property<string>("SiteTitle")
                        .HasMaxLength(100);

                    b.Property<int>("ValidBoonPerDay");

                    b.HasKey("ID");

                    b.ToTable("TblSettings");
                });

            modelBuilder.Entity("Domain.Db.TblShopingCart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CookieID");

                    b.Property<int>("Count");

                    b.Property<DateTime>("Date");

                    b.Property<int>("ProductID");

                    b.Property<string>("ShopingCartGroupID");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CookieID")
                        .HasName("IX_CookieID");

                    b.HasIndex("Date")
                        .HasName("IX_Date");

                    b.HasIndex("ProductID");

                    b.HasIndex("ShopingCartGroupID")
                        .HasName("IX_ShopingCartGroupID");

                    b.HasIndex("UserID");

                    b.ToTable("TblShopingCart");
                });

            modelBuilder.Entity("Domain.Db.TblSlider", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ImageID");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int>("Sort");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.HasIndex("ImageID");

                    b.HasIndex("Sort")
                        .HasName("IX_Sort");

                    b.ToTable("TblSlider");
                });

            modelBuilder.Entity("Domain.Db.TblSpical", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("TblSpical");
                });

            modelBuilder.Entity("Domain.Db.TblTechnicalProp", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TopicID");

                    b.HasKey("ID");

                    b.HasIndex("TopicID");

                    b.ToTable("TblTechnicalProp");
                });

            modelBuilder.Entity("Domain.Db.TblTechnicalProp_Products", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductID");

                    b.Property<int>("TechnicalPropID");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("TechnicalPropID");

                    b.ToTable("TblTechnicalProp_Products");
                });

            modelBuilder.Entity("Domain.Db.TblTopic", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ParrentID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.HasIndex("ParrentID")
                        .HasName("IX_ParrentID");

                    b.HasIndex("Title")
                        .HasName("IX_Title");

                    b.ToTable("TblTopic");
                });

            modelBuilder.Entity("Domain.Db.TblTypePost", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("TblTypePost");
                });

            modelBuilder.Entity("Domain.Db.TblUserAccess", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AcccessID");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("AcccessID");

                    b.HasIndex("UserID");

                    b.ToTable("TblUserAccess");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Db.ApplicationUser", b =>
                {
                    b.HasOne("Domain.Db.TblImage", "TblImageProfile")
                        .WithMany()
                        .HasForeignKey("ImageID");
                });

            modelBuilder.Entity("Domain.Db.TblAsks", b =>
                {
                    b.HasOne("Domain.Db.TblProducts", "TblProducts")
                        .WithMany("TblAsks")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Db.ApplicationUser", "TblUser")
                        .WithMany("TblAsks")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Domain.Db.TblBoon", b =>
                {
                    b.HasOne("Domain.Db.TblOrders", "TblOrders")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Db.ApplicationUser", "TblUser")
                        .WithMany("TblBoon")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Domain.Db.TblBrands", b =>
                {
                    b.HasOne("Domain.Db.TblImage", "TblImage")
                        .WithMany("TblBrands")
                        .HasForeignKey("ImageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Db.TblComments", b =>
                {
                    b.HasOne("Domain.Db.TblProducts", "TblProducts")
                        .WithMany("TblComments")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Db.ApplicationUser", "TblUsers")
                        .WithMany("TblComments")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Domain.Db.TblFavo", b =>
                {
                    b.HasOne("Domain.Db.TblProducts", "TblProduct")
                        .WithMany("TblFavos")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Db.ApplicationUser", "TblUser")
                        .WithMany("TblFavo")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Domain.Db.TblImage", b =>
                {
                    b.HasOne("Domain.Db.TblProducts", "TblProducts")
                        .WithMany("TblImages")
                        .HasForeignKey("ProductID");

                    b.HasOne("Domain.Db.TblServers", "TblServer")
                        .WithMany("TblImages")
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Db.TblLoginHistory", b =>
                {
                    b.HasOne("Domain.Db.ApplicationUser", "TblUser")
                        .WithMany("TblLoginHistory")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Domain.Db.TblMessages", b =>
                {
                    b.HasOne("Domain.Db.ApplicationUser", "TblUserAdmin")
                        .WithMany("TblMessagesAdmin")
                        .HasForeignKey("AdminID");

                    b.HasOne("Domain.Db.ApplicationUser", "TblUserClaint")
                        .WithMany("TblMessagesClaint")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Domain.Db.TblNewsLetter", b =>
                {
                    b.HasOne("Domain.Db.ApplicationUser", "TblUser")
                        .WithMany("TblNewsLetter")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Domain.Db.TblNoti", b =>
                {
                    b.HasOne("Domain.Db.TblProducts", "TblProducts")
                        .WithMany("TblNoti")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Db.ApplicationUser", "TblUser")
                        .WithMany("TblNoti")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Domain.Db.TblOrders", b =>
                {
                    b.HasOne("Domain.Db.TblTypePost", "TblTypePost")
                        .WithMany("TblOrders")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Db.ApplicationUser", "TblUser")
                        .WithMany("TblOrders")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Domain.Db.TblPrices", b =>
                {
                    b.HasOne("Domain.Db.TblProducts", "TblProducts")
                        .WithMany("TblPrices")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Db.TblProducts", b =>
                {
                    b.HasOne("Domain.Db.TblCategory", "TblCategory")
                        .WithMany("TblProducts")
                        .HasForeignKey("CateID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Db.TblGurunty", "TblGurunty")
                        .WithMany("TblProducts")
                        .HasForeignKey("GuruntyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Db.ApplicationUser", "TblUser")
                        .WithMany("TblProducts")
                        .HasForeignKey("UserID");

                    b.HasOne("Domain.Db.TblSpical", "TblSpical")
                        .WithMany("TblProducts")
                        .HasForeignKey("spID");
                });

            modelBuilder.Entity("Domain.Db.TblPropertis_Product", b =>
                {
                    b.HasOne("Domain.Db.TblProducts", "TblProducts")
                        .WithMany("TblPropertis_Product")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Db.TblPropertis", "TblPropertis")
                        .WithMany("TblPropertis_Product")
                        .HasForeignKey("PropertiseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Db.TblRaiting", b =>
                {
                    b.HasOne("Domain.Db.TblProducts", "TblProducts")
                        .WithMany("TblRaiting")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Db.ApplicationUser", "TblUser")
                        .WithMany("TblRaiting")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Domain.Db.TblShopingCart", b =>
                {
                    b.HasOne("Domain.Db.TblProducts", "TblProducts")
                        .WithMany("TblShopingCart")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Db.ApplicationUser", "TblUser")
                        .WithMany("TblShopingCart")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Domain.Db.TblSlider", b =>
                {
                    b.HasOne("Domain.Db.TblImage", "TblImage")
                        .WithMany("TblSlider")
                        .HasForeignKey("ImageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Db.TblTechnicalProp", b =>
                {
                    b.HasOne("Domain.Db.TblTopic", "TblTopic")
                        .WithMany("TblTechnicalProp")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Db.TblTechnicalProp_Products", b =>
                {
                    b.HasOne("Domain.Db.TblProducts", "TblProducts")
                        .WithMany("TblTechnicalProp_Products")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Db.TblTechnicalProp", "TblTechnicalProp")
                        .WithMany()
                        .HasForeignKey("TechnicalPropID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Db.TblUserAccess", b =>
                {
                    b.HasOne("Domain.Db.TblAccess", "TblAccess")
                        .WithMany("TblUserAccess")
                        .HasForeignKey("AcccessID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Db.ApplicationUser", "TblUser")
                        .WithMany("TblUserAccess")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Db.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Db.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Db.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Db.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
